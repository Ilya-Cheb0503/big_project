import logging

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes

from nice_bot import send_messages, admins_id
from functions import *
from constants import *
from menu_buttons import *


async def user_main_menu(button_text, update, context):
        button_text_options = {
            '–í–∞–∫–∞–Ω—Å–∏–∏': show_vacancies,
            '–û –∫–æ–º–ø–∞–Ω–∏–∏': show_about_company,
            '–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã': show_FAQ,
            '–õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è': list_waiting,
            '–ö–æ–Ω—Ç–∞–∫—Ç—ã': contacts,
        }
        if '–ó–∞–ø—Ä–æ—Å full –¥–∞–Ω–Ω—ã—Ö' in context.user_data:
            await list_waiting(update, context)
        elif button_text not in button_text_options:
            if button_text.lower().__eq__('–±–µ–∑ –æ–ø—ã—Ç–∞'):
                logging.info('–ë–ï–ó –û–ü–´–¢–ê')
                await get_no_exp_vacancies(update, context)
            else:
                await get_vacancies_by_key_word(update, context, button_text)
        else:
            current_option = button_text_options[button_text]
            await current_option(update, context)


async def admin_main_menu(button_text, update, context):
        button_text_options = {
            '–í–∞–∫–∞–Ω—Å–∏–∏': show_vacancies,
            '–û –∫–æ–º–ø–∞–Ω–∏–∏': show_about_company,
            '–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã': show_FAQ,
            '–õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è': list_waiting,
            '–ö–æ–Ω—Ç–∞–∫—Ç—ã': contacts,
            '–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞': show_admin_options
        }
        if '–ó–∞–ø—Ä–æ—Å full –¥–∞–Ω–Ω—ã—Ö' in context.user_data:
            await list_waiting(update, context)
        elif button_text not in button_text_options:
            if button_text.lower().__eq__('–±–µ–∑ –æ–ø—ã—Ç–∞'):
                logging.info('–ë–ï–ó –û–ü–´–¢–ê')
                await get_no_exp_vacancies(update, context)
            else:
                await get_vacancies_by_key_word(update, context, button_text)
        else:
            current_option = button_text_options[button_text]
            await current_option(update, context)


async def admin_options_menu(button_text, update, context):
    logging.info('admin options')
    
    button_text_options = {
        '–†–∞—Å—Å—ã–ª–∫–∞': send_messages,
        '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': main_start_menu,
    }
    
    if 'message_state' not in context.user_data:
        current_option = button_text_options[button_text]
        logging.info(f'current admin option = {current_option}')
        await current_option(update, context)
    elif 'message_state' in context.user_data:
        await send_messages(update, context)


async def vacancies_menu(button_text, update, context):
    button_text_options = {
        '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏': None,
        '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏': show_categories,
        '–í–∞–∫–∞–Ω—Å–∏–∏ –±–µ–∑ –æ–ø—ã—Ç–∞': get_no_exp_vacancies,
        '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': main_start_menu
    }

    # current_option = button_text_options[button_text]
    # await current_option(update, context)
    if 'a_lot_of_vacancies' in context.user_data:
        context.user_data.pop('a_lot_of_vacancies')
        if button_text.__eq__('–†–∏—Å–∫–Ω—É'):
            await get_all_company_vacancies(update, context)
            
        else:
            await show_vacancies(update, context)
    
    elif button_text.__eq__('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏'):
        context.user_data['a_lot_of_vacancies'] = True
        vacancies_count = await get_vacancy_count()
        context.user_data['vacancies_count'] = vacancies_count
        await show_all_vacancies_sure(update, context)
        

    elif 'vacancies_proccess' in context.user_data:
        await get_vacancies_proccess(update, context)
    elif type(button_text_options[button_text]) == str:
        await update.message.reply_text(button_text_options[button_text])
        
    else:
        current_option = button_text_options[button_text]
        await current_option(update, context)


async def categories_menu(button_text, update, context):
    button_text_options = {
        '–¢–≠–¶': show_power_vacancies,
        '–û—Ñ–∏—Å': show_office_vacancies,
        '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': main_start_menu
    }

    # current_option = button_text_options[button_text]
    # await current_option(update, context)
    if button_text.__eq__('–°—Ç–∞–∂–∏—Ä–æ–≤–∫–∞'):
        await get_vacancies_by_key_word(update, context, key_word='–°—Ç–∞–∂–æ—Ä')
        
    else:
        current_option = button_text_options[button_text]
        await current_option(update, context)


async def power_vacancies_menu(button_text, update, context):
    vacancies_options = [
        '–¢–µ–ø–ª–æ—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞', '–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞', '–ê–°–£ –¢–ü',
        '–†–ó–ê', '–†–µ–º–æ–Ω—Ç', '–•–∏–º–∏—è', 'HR', '–ò–¢', '–≠–∫–æ–Ω–æ–º–∏–∫–∞', '–°–±—ã—Ç',
        '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –æ—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞', '–î—Ä—É–≥–æ–µ'
    ]

    if button_text.__eq__('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'):
        await main_start_menu(update, context)
    elif button_text in energy_vacancy_keys:
        await get_vacancies_by_keys_list(update, context, energy_vacancy_keys[button_text])
    else:
        await update.message.reply_text('–¢–∞–∫–æ–π –æ–ø—Ü–∏–∏ –Ω–µ—Ç')


async def office_vacancies_menu(button_text, update, context):
    vacancies_options = [
        '–ó–∞–∫—É–ø–∫–∏', '–≠–∫–æ–Ω–æ–º–∏–∫–∞','HR', '–°–±—ã—Ç', '–ò–¢',
        '–Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è', '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
        '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –æ—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞'
        ]

    if button_text.__eq__('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'):
        await main_start_menu(update, context)
    elif button_text in ofice_vacancy_keys:

        await get_vacancies_by_keys_list(update, context, ofice_vacancy_keys[button_text])
        pass # –í—ã–∑–æ–≤ –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    else:
        await update.message.reply_text('–¢–∞–∫–æ–π –æ–ø—Ü–∏–∏ –Ω–µ—Ç')


async def about_company_menu(button_text, update, context):
    button_text_options = {
        '–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã –≤ –ü–ê–û ¬´–ú–æ—Å—ç–Ω–µ—Ä–≥–æ¬ª': company_benefit,
        '–§–∏–ª–∏–∞–ª—ã': company_filiales,
        '–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã': show_motivations_programms,
        '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': main_start_menu
    }

    current_option = button_text_options[button_text]
    if type(current_option) == str:
        await update.message.reply_text(current_option)
    else:
        await current_option(update, context)


async def motivations_programms_menu(button_text, update, context):
    button_text_options = {
        '–ö–∞–¥—Ä–æ–≤—ã–π —Ä–µ–∑–µ—Ä–≤': motivations_programms[0],
        '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏ –ø–æ–≤—ã—à–µ–Ω–∏–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞ —Å—á–µ—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è': motivations_programms[1],
        '–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞': motivations_programms[2],
        '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è': motivations_programms[3],
        '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫—É–ª—å—Ç—É—Ä–Ω–æ-–º–∞—Å—Å–æ–≤—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è': motivations_programms[4],
        '–°–æ–≤–µ—Ç –º–æ–ª–æ–¥—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤': motivations_programms[5],
        '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': main_start_menu,
    }

    current_option = button_text_options[button_text]
    if type(current_option) == str:
        await update.message.reply_text(current_option)
    else:
        await current_option(update, context)


async def FAQ_menu(button_text, update, context):
    button_text_options = {
        'üíº –ü–æ –∫–∞–∫–æ–º—É –≥—Ä–∞—Ñ–∏–∫—É —è –±—É–¥—É —Ä–∞–±–æ—Ç–∞—Ç—å?': FAQ[0],
        'üí∞ –ö–∞–∫–æ–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã –º–Ω–µ –æ–∂–∏–¥–∞—Ç—å?': FAQ[1],
        'üè† –ö–∞–∫–∏–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –¥–ª—è –∏–Ω–æ–≥–æ—Ä–æ–¥–Ω–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤?': FAQ[2],
        'üõ°Ô∏è –ö–∞–∫–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ú–æ—Å—ç–Ω–µ—Ä–≥–æ?': FAQ[3],
        'üìç –ê–¥—Ä–µ—Å–∞ –¢–≠–¶ –ú–æ—Å—ç–Ω–µ—Ä–≥–æ –ì–≠–°-1': FAQ[4],
        'üë©‚Äçüè´ –ù–∞ –∫–∞–∫–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –ø—Ä–∏–π—Ç–∏ –±–µ–∑ –æ–ø—ã—Ç–∞?': FAQ[5],
        'üìù –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –ø—Ä–∏ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ?': FAQ[6],
        'üöÄ –ï—Å—Ç—å –ª–∏ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞?': FAQ[7],
        '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': main_start_menu

    }
    
    current_option = button_text_options[button_text]
    if type(current_option) == str:
        await update.message.reply_text(current_option, parse_mode='HTML')
    else:
        await current_option(update, context)


async def list_waiting(update, context):
    current_text = update.message.text
    text_wait = (
        '–ï—Å–ª–∏ –≤—ã –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å\n'
        '–Ω–µ–±–æ–ª—å—à—É—é —Ñ–æ—Ä–º—É –∏ –º—ã —Å–æ–æ–±—â–∏–º –í–∞–º –≤ —á–∏—Å–ª–µ –ø–µ—Ä–≤—ã—Ö, –∫–æ–≥–¥–∞\n'
        '–ø–æ–¥—Ö–æ–¥—è—â–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –ø–æ—è–≤–∏—Ç—Å—è!'
    )
    if '–ó–∞–ø—Ä–æ—Å full –¥–∞–Ω–Ω—ã—Ö' not in context.user_data:
        await update.message.reply_text(text_wait)
        context.user_data['–ó–∞–ø—Ä–æ—Å full –¥–∞–Ω–Ω—ã—Ö'] = '–°—Ç–∞—Ä—Ç'
        context.user_data['information_form'] = {}
    await user_full_information_process(update, context, current_text)

async def contacts(update, context):
    await update.message.reply_text(contacts_info)
