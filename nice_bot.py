import asyncio
import logging
import os
from time import sleep

import nest_asyncio
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv
from telegram import (InlineKeyboardButton, InlineKeyboardMarkup,
                      ReplyKeyboardMarkup, Update)
from telegram.ext import (Application, CallbackQueryHandler, CommandHandler,
                          ContextTypes, MessageHandler, filters)

from bd_update import create_rename_and_delete
from constants import *
from functions import *
from keyboards import *
from menu_buttons import *
from menu_options import *
from new_module import *
from options_inline_list import *
from settings import *
from test_db import creat_user_in_db, get_user_from_db, update_user_in_db


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    user = await get_user_from_db(user_id)
    user_inf = user['user_inf']
    user_name = user_inf['–§–ò–û']
    
    buttons_calling_data = query.data


    # –º—ã —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏, –∞ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ—ç—Ç–æ–º—É –Ω–µ –≤–∞–∂–µ–Ω –ø–æ—Ä—è–¥–æ–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è *–Ω–∞ –ø–æ–¥—É–º–∞—Ç—å
    if buttons_calling_data.__eq__('user_data'):
        await list_waiting(update, context)
    elif buttons_calling_data.__eq__('postman'):
        await send_messages(update, context)

    elif buttons_calling_data in power_request_translater.keys():
        first_key = power_request_translater[buttons_calling_data]
        promt_keys = energy_vacancy_keys[first_key]
        await get_vacancies_by_keys_list(update, context, promt_keys)

    elif buttons_calling_data in ofice_request_translater.keys():
        first_key = ofice_request_translater[buttons_calling_data]
        promt_keys = ofice_vacancy_keys[first_key]
        await get_vacancies_by_keys_list(update, context, promt_keys)
    
    elif buttons_calling_data.__eq__('no_exp'):
        await get_no_exp_vacancies(update, context)
    
    elif buttons_calling_data.__eq__('show_all'):
        current_count = await get_vacancy_count()
        warning_text = (
        '–í–Ω–∏–º–∞–Ω–∏–µ‚ÄºÔ∏è\n\n'
        f'–ê–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π —Å–µ–π—á–∞—Å: {current_count}\n\n'
        '–í—ã —Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏?')
        keyboard = [
            [InlineKeyboardButton(text = '–†–∏—Å–∫–Ω—É', callback_data = 'risk')],
            [InlineKeyboardButton(text = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data = 'main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text=warning_text, reply_markup=reply_markup)


    elif buttons_calling_data.__eq__('risk'):
        await get_all_company_vacancies(update, context)


    elif buttons_calling_data in but_opt.keys():
        menu = buttons_calling_data == 'main_menu'
        message_text, buttons_set = but_opt[buttons_calling_data]
        if menu and 'admin_status' in context.user_data:
            buttons_set = buttons_set[1]
        elif menu:
            buttons_set = buttons_set[0]

        if buttons_set:
            keyboard = []
            for button in buttons_set:
                
                if all(isinstance(element, str) for element in button):
                    button_name, button_data = button
                    keyboard.append(
                        [InlineKeyboardButton(text = button_name, callback_data = button_data)]
                    )
                else:
                    
                    next_button_row = []
                    for element in button:
                        button_name, button_data = element
                        next_button_row.append(
                            InlineKeyboardButton(text = button_name, callback_data = button_data)
                        )
                    keyboard.append(next_button_row)
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text=message_text, reply_markup=reply_markup)
        else:
            current_keyboard = query.message.reply_markup
            await query.edit_message_text(text=message_text, reply_markup=current_keyboard)

    elif 'tq' in buttons_calling_data:
        vac_id = query.data.split(';')[1]
        int_id = int(vac_id)
        vacancy = await get_vacancy_by_vacancy_id(int_id)
        vacancy_name = vacancy.vacancy_inf['–í–∞–∫–∞–Ω—Å–∏—è']
        context.user_data['vacancy_name'] = vacancy_name
        context.user_data['–ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'] = '–ó–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
        await user_form_information_process(update, context)

    elif not user_inf['–§–ò–û'] or not user_inf['–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞']:
        context.user_data['–ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'] = '–ó–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
        await user_full_information_process(update, context)

    elif buttons_calling_data.__eq__('get_spec'):
        await context.bot.send_message(chat_id=user_id, text=inf_contacts_text, parse_mode='Markdown')

    else:
        
        int_id = int(buttons_calling_data)
        vacancy = await get_vacancy_by_vacancy_id(int_id)
        vacancy_url = vacancy.vacancy_inf['–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é']
        vacancy_name = vacancy.vacancy_inf['–í–∞–∫–∞–Ω—Å–∏—è']

        user_send_req_text = (
            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n'
            f'–û—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é: {vacancy_name}'
        )

        await context.bot.send_message(chat_id=group_id, text=user_send_req_text)

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É —Å URL
        keyboard = [
        [
            InlineKeyboardButton("–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f'tq;{int_id}')
        ],
        [
            InlineKeyboardButton("–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é", callback_data='req_button', url=vacancy_url)
        ],
        [
            InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ üìû", callback_data='get_spec')
        ],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.edit_message_reply_markup(chat_id=query.from_user.id, message_id=query.message.message_id, reply_markup=reply_markup)

        vacancion_name = query.data.split(';')[1]
        user = await get_user_from_db(user_id)
        user_inf = user['user_inf']
        user_name = user_inf['–§–ò–û']
        logging.info(f'IMPOOOOORTANT {vacancion_name}')
        note_text = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n–û—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é: {vacancion_name}'
        if '–§–ò–û' and '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ' in user_inf:
            await context.bot.send_message(chat_id=group_id, text=note_text, parse_mode='HTML')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:

    
    # await start_create_table()
    if '–ó–∞–ø—Ä–æ—Å full –¥–∞–Ω–Ω—ã—Ö' in context.user_data:
        context.user_data.pop('–ó–∞–ø—Ä–æ—Å full –¥–∞–Ω–Ω—ã—Ö')

    if '–ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö' in context.user_data:
        context.user_data.pop('–ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')

    user_id = update.effective_user.id
    user = await get_user_from_db(user_id)
    if not user:
        await creat_user_in_db(user_id)
    
    keyboard = [
        ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    # if admin_authenticated.get(user_id, False):
    if user_id in admins_id:
        await update_user_in_db(user_id, menu_state='–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
        text = welcome_text 
        context.user_data['admin_status'] = True
        await set_inline_keyboard(update, context, buttons_list = admin_main_menu_keyboard, message_text = text)

        sleep(0.5)
        await context.bot.send_message(chat_id=user_id, text=welcome_two, parse_mode='Markdown', reply_markup=reply_markup)

    else:
        await update_user_in_db(user_id, menu_state='–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')

        await set_inline_keyboard(update, context, buttons_list = user_main_menu_keyboard, message_text = text)

        sleep(0.5)
        await context.bot.send_message(chat_id=user_id, text=welcome_two, parse_mode='Markdown', reply_markup=reply_markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    
    list_keys = [
    '–ó–∞–ø—Ä–æ—Å full –¥–∞–Ω–Ω—ã—Ö',
    '–ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
    'information_form',
    'message_inf',
    'message_state',
    'current_text',
    'photo_path',
    'pdf_path',
    'vacancy_name',

]

    user_id = update.effective_user.id
    current_text = update.message.text
    
    admin_check = user_id in admins_id
    if admin_check:
        context.user_data['admin_status'] = True

    if update.message.photo:
        if 'message_state' in context.user_data:
            await send_messages(update, context)
    elif update.message.document:
        if '–ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö' in context.user_data:
            await user_form_information_process(update, context)


    elif current_text.__eq__('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'):

        for key in list_keys:
            if key in context.user_data:
                context.user_data.pop(key)

        if admin_check:
            await set_inline_keyboard(update, context, buttons_list = admin_main_menu_keyboard, message_text = welcome_text)

        else:
            await set_inline_keyboard(update, context, buttons_list = user_main_menu_keyboard, message_text = welcome_text)
    
    elif 'message_state' in context.user_data:
            await send_messages(update, context)

    elif '–ó–∞–ø—Ä–æ—Å full –¥–∞–Ω–Ω—ã—Ö' in context.user_data:
        await list_waiting(update, context)

    elif '–ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö' in context.user_data:
        await user_form_information_process(update, context)

    elif current_text.lower().__eq__('–±–µ–∑ –æ–ø—ã—Ç–∞'):
        logging.info('–ë–ï–ó –û–ü–´–¢–ê')
        await get_no_exp_vacancies(update, context)
    else:
        await get_vacancies_by_key_word(update, context, current_text)


async def db_update_task(update, context):

    user_id = update.effective_user.id
    if str(user_id).__eq__('2091023767'):
        logging.info('–ó–ê–ü–£–°–ö–ê–ï–ú —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î')
        
        await create_rename_and_delete()
        
        scheduler = AsyncIOScheduler()
        scheduler.add_job(create_rename_and_delete, 'cron', hour=0, minute=0)  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–∂–¥—É—é –ø–æ–ª–Ω–æ—á—å
        scheduler.start()

        logging.info('–ó–ê–ü–£–°–¢–ò–õ–ò —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î')

        await context.bot.send_message(chat_id=user_id, text='–ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n–¢–∞–π–º–µ—Ä –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω')


async def main(telegram_bot_token) -> None:
    
    nest_asyncio.apply()

    application = Application.builder().token(telegram_bot_token).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('developer_hand', db_update_task))
    # application.add_handler(CommandHandler('buttons', send_inline_buttons))
    application.add_handler(CallbackQueryHandler(button_callback))  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND | filters.PHOTO | filters.Document.ALL, button_handler))
      # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logging.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await application.run_polling()
    except (KeyboardInterrupt, SystemExit):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≤—ã–≤–æ–¥–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
        logging.error(f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", exc_info=True)
        await application.stop()
    

if __name__ == '__main__':
    
    try:
        load_dotenv()
        telegram_bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    except Exception as er:
        logging.error(f'–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞.\n{er}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ .env')

    asyncio.run(main(telegram_bot_token))
        