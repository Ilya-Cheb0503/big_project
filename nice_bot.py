import asyncio
import logging
import os
from functools import partial
from time import sleep

import nest_asyncio
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv
from telegram import (InlineKeyboardButton, InlineKeyboardMarkup,
                      ReplyKeyboardMarkup, ReplyKeyboardRemove, Update)
from telegram.ext import (Application, ApplicationBuilder,
                          CallbackQueryHandler, CommandHandler, ContextTypes,
                          MessageHandler, filters)

from bd_update import create_rename_and_delete
from constants import *
from functions import *
from keyboards import *
from menu_buttons import *
from menu_options import *
from new_module import *
from settings import *
from test_db import (User_tg, creat_user_in_db, get_user_from_db,
                     start_create_table, update_user_in_db)


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    user = await get_user_from_db(user_id)
    user_inf = user['user_inf']
    user_name = user_inf['–§–ò–û']

    list_keys = [
    '–ó–∞–ø—Ä–æ—Å full –¥–∞–Ω–Ω—ã—Ö',
    '–ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
    'information_form',
    'message_inf',
    'message_state',
    'current_text',
    'photo_path',
    'pdf_path',
    'vacancy_name',

]
    if query.data.__eq__('main_menu'):
        for key in list_keys:
            if key in context.user_data:
                context.user_data.pop(key)
        await main_start_menu(update, context)

    elif 'tq' in query.data:
        vac_id = query.data.split(';')[1]
        int_id = int(vac_id)
        vacancy = await get_vacancy_by_vacancy_id(int_id)
        vacancy_name = vacancy.vacancy_inf['–í–∞–∫–∞–Ω—Å–∏—è']
        context.user_data['vacancy_name'] = vacancy_name
        context.user_data['–ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'] = '–ó–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
        await user_form_information_process(update, context)

    elif not user_inf['–§–ò–û'] or not user_inf['–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞']:
        context.user_data['–ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'] = '–ó–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
        await user_full_information_process(update, context)

    elif query.data.__eq__('get_spec'):
        await context.bot.send_message(chat_id=user_id, text=inf_contacts_text, parse_mode='Markdown')

    else:
        
        int_id = int(query.data)
        vacancy = await get_vacancy_by_vacancy_id(int_id)
        vacancy_url = vacancy.vacancy_inf['–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é']
        vacancy_name = vacancy.vacancy_inf['–í–∞–∫–∞–Ω—Å–∏—è']

        user_send_req_text = (
            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n'
            f'–û—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é: {vacancy_name}'
        )

        await context.bot.send_message(chat_id=group_id, text=user_send_req_text)

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É —Å URL
        keyboard = [
        [
            InlineKeyboardButton("–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f'tq;{int_id}')
        ],

        [
            InlineKeyboardButton("–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é", callback_data='req_button', url=vacancy_url)
        ],

        [
            InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ üìû", callback_data='get_spec')
        ],
        ]

        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –∫–Ω–æ–ø–æ–∫
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await context.bot.edit_message_reply_markup(chat_id=query.from_user.id, message_id=query.message.message_id, reply_markup=reply_markup)


        # await context.bot.send_message(query.from_user.id, "https://example.com")
        vacancion_name = query.data.split(';')[1]
        user = await get_user_from_db(user_id)
        user_inf = user['user_inf']
        user_name = user_inf['–§–ò–û']
        logging.info(f'IMPOOOOORTANT {vacancion_name}')
        note_text = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n–û—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é: {vacancion_name}'
        if '–§–ò–û' and '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ' in user_inf:
            logging.info(f'SEEEENDING {vacancion_name}')
            await context.bot.send_message(chat_id=group_id, text=note_text, parse_mode='HTML')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # await start_create_table()
    if '–ó–∞–ø—Ä–æ—Å full –¥–∞–Ω–Ω—ã—Ö' in context.user_data:
        context.user_data.pop('–ó–∞–ø—Ä–æ—Å full –¥–∞–Ω–Ω—ã—Ö')

    if '–ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö' in context.user_data:
        context.user_data.pop('–ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')

    user_id = update.effective_user.id
    user = await get_user_from_db(user_id)
    if not user:
        await creat_user_in_db(user_id)
    
    # if admin_authenticated.get(user_id, False):
    if user_id in admins_id:
        await update_user_in_db(user_id, menu_state='–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
        text = welcome_text 

        keyboard = admin_main_menu_keyboard
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await update.message.reply_text(text, reply_markup=reply_markup)

        sleep(0.5)
        await context.bot.send_message(chat_id=user_id, text=welcome_two, parse_mode='Markdown')

    else:
        await update_user_in_db(user_id, menu_state='–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')

        keyboard = user_main_menu_keyboard
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)

        sleep(0.5)
        await context.bot.send_message(chat_id=user_id, text=welcome_two, parse_mode='Markdown')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    
    current_text = update.message.text
    user_id = update.effective_user.id
    user = await get_user_from_db(user_id)
    if user:
        menu_state = user['menu_state']

    logging.info(f'inf: {current_text}, {menu_state}')
    menu_list = {
    '–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è': user_main_menu,
    '–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞': admin_main_menu,
    '–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞': admin_options_menu,
    '–ú–µ–Ω—é –≤–∞–∫–∞–Ω—Å–∏–π': vacancies_menu,
    'SURE?': vacancies_menu,
    '–ú–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π': categories_menu,
    '–ú–µ–Ω—é –≤–∞–∫–∞–Ω—Å–∏–π –¢–≠–¶': power_vacancies_menu,
    '–ú–µ–Ω—é –≤–∞–∫–∞–Ω—Å–∏–π –æ—Ñ–∏—Å': office_vacancies_menu,
    '–û –∫–æ–º–ø–∞–Ω–∏–∏': about_company_menu,
    '–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã': motivations_programms_menu,
    '–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã': FAQ_menu,
}
    if '–ó–∞–ø—Ä–æ—Å full –¥–∞–Ω–Ω—ã—Ö' in context.user_data:
        await list_waiting(update, context)
    

    elif '–ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö' in context.user_data:
        await user_form_information_process(update, context)


    # elif '–∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö' in context.user_data:
    #     await ask_user_inf(user_id, current_text)
    #     context.user_data.pop('–∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö')
    #     await context.bot.send_message(chat_id=user_id, text=inf_contacts_text, parse_mode='Markdown')

    else:
        current_menu = menu_list[menu_state]
        await current_menu(current_text, update, context)
    
    await extra_inline_button(update, context)


async def db_update_task(update, context):
    logging.info('–ó–ê–ü–£–°–ö–ê–ï–ú —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î')
    scheduler = AsyncIOScheduler()
    scheduler.add_job(create_rename_and_delete, 'cron', hour=0, minute=0)  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–∞–∂–¥—É—é –ø–æ–ª–Ω–æ—á—å
    scheduler.start()
    logging.info('–ó–ê–ü–£–°–¢–ò–õ–ò —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î')


async def main(telegram_bot_token) -> None:
    
    nest_asyncio.apply()

    application = Application.builder().token(telegram_bot_token).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('developer_hand', db_update_task))
    # application.add_handler(CommandHandler('buttons', send_inline_buttons))
    application.add_handler(CallbackQueryHandler(button_callback))  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND | filters.PHOTO | filters.Document.ALL, button_handler))
      # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logging.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await application.run_polling()
    except (KeyboardInterrupt, SystemExit):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≤—ã–≤–æ–¥–∞ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
        logging.error(f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", exc_info=True)
        await application.stop()
    

if __name__ == '__main__':
    
    try:
        load_dotenv()
        telegram_bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    except Exception as er:
        logging.error(f'–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞.\n{er}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ .env')

    asyncio.run(main(telegram_bot_token))
        