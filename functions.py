import json
import logging
import os
import re
from time import sleep

import requests
from telegram import (InlineKeyboardButton, InlineKeyboardMarkup,
                      ReplyKeyboardMarkup, ReplyKeyboardRemove, Update)
from telegram.ext import ContextTypes

from constants import *
from menu_buttons import *
from new_module import *
from test_db import *


async def check_user_inf(user_id):
    user = await get_user(user_id)
    user_inf = user['user_inf']
    if '–§–ò–û' and '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ' in user_inf:
        return True
    return False
    

async def ask_user_inf(user_id, user_inf):
    user_name, user_phone = re.split(r'[;,]', user_inf)
    user_inf_params = {'–§–ò–û': user_name, '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞': user_phone}
    await update_user_in_db(user_id, user_inf=user_inf_params)


async def user_form_information_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = await get_user(user_id)
    user_inf_db = user['user_inf']

    if 'information_form' not in context.user_data:
        context.user_data['information_form'] = {}
    user_inf = context.user_data['information_form']
    try:
        current_text = update.message.text
    except Exception:
        current_text = None
        context.user_data['–ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'] = '–ó–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'

    
    step = {
        '–ó–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è': ('check', None),
        'check': ('–§–ò–û', None),
        '–§–ò–û': ('–†–µ–∑—é–º–µ –≤–æ–ø—Ä–æ—Å', '–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ä–µ–∑—é–º–µ?'),
        '–†–µ–∑—é–º–µ –≤–æ–ø—Ä–æ—Å': ('–ü—Ä–æ–≤–µ—Ä–∫–∞ pdf —Ñ–∞–π–ª–∞', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .pdf'),
        '–ü—Ä–æ–≤–µ—Ä–∫–∞ pdf —Ñ–∞–π–ª–∞': ('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∫–µ—Ç—ã', None),

        # '–£—Å–ø–µ—à–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—é–º–µ': ('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∫–µ—Ç—ã', None),

        '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∫–µ—Ç—ã': ('–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã', None),
        '–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã': ('done', None),
        '–î–æ–ø —Ä–µ–∑—é–º–µ –≤–æ–ø—Ä–æ—Å': ('–î–æ–ø pdf —Ñ–∞–π–ª', None),
        '–î–æ–ø pdf —Ñ–∞–π–ª': ('–†–µ–∑—é–º–µ', None),
        
        '–†–µ–∑—é–º–µ': ('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', '–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:'),
        '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞': ('–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–ñ–µ–ª–∞–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å:'),
        '–î–æ–ª–∂–Ω–æ—Å—Ç—å': ('–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã', '–í–∞—à —Å—Ç–∞–∂:'),
        '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã': ('–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–í–∞—à —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:'),
        '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': ('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', None),
        '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ': ('done', None),
        'done': (None, None)
    }
    save_steps = [
        '–§–ò–û', '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', '–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'
        ]

    current_step = context.user_data['–ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö']

    if current_text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' or current_text == '–ù–∞–∑–∞–¥':
        context.user_data.pop('–ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
        await main_start_menu(update, context)
        return 
    
    if current_step in save_steps:
        context.user_data['information_form'][current_step] = current_text
        await update_user_in_db(user_id, user_inf={current_step:current_text})

    
    # –ü–û–î–£–ú–ê–¢–¨ –û –¢–û–ú –ß–¢–û–ë–´ –ü–ï–†–ï–ù–ï–°–¢–ò –î–í–ï –°–¢–†–û–ö–ò, –ö–û–¢–û–†–´–ï –ù–ò–ñ–ï –ò –ò–ó–ú–ï–ù–ò–¢–¨ –ü–†–û–í–ï–†–ö–£
    # –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–µ –°–õ–ï–î–£–Æ–©–ï–ì–û —à–∞–≥–∞, –∞ –¢–ï–ö–£–©–ï–ì–û
    next_step, message_text = step[current_step]
    context.user_data['–ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'] = next_step

    if current_step.__eq__('–ó–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'):
        text_wait = (
        '–ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –±–æ—Ç–∞,\n–∞ –æ–Ω –±–µ—Ä–µ–∂–Ω–æ —Å–æ–±–µ—Ä–µ—Ç –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∞–Ω–∫–µ—Ç—É üì†'
    )

        keyboard = [
            ['–°–æ–≥–ª–∞—Å–µ–Ω —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ‚úÖ'],
            ['–ù–∞–∑–∞–¥']
        ]

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await context.bot.send_message(chat_id=user_id, text=text_wait, reply_markup=reply_markup)

    elif next_step.__eq__('–§–ò–û'):
        text = '–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤–∞—à–∏ –§–ò–û:'
        keyboard = [
            ['–ù–∞–∑–∞–¥']
        ]

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await context.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)

    elif next_step.__eq__('–†–µ–∑—é–º–µ –≤–æ–ø—Ä–æ—Å'):
        text = '–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ä–µ–∑—é–º–µ?'
        keyboard = [
                ['–î–∞'],
                ['–ù–µ—Ç'],
            ]

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await context.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)

    elif current_step.__eq__('–†–µ–∑—é–º–µ –≤–æ–ø—Ä–æ—Å'):
        
        if current_text.__eq__('–î–∞'):
            context.user_data['–ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'] = '–ü—Ä–æ–≤–µ—Ä–∫–∞ pdf —Ñ–∞–π–ª–∞'
            text = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .pdf'
            keyboard = [
                ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
            ]

            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(text, reply_markup=reply_markup)

        elif current_text.__eq__('–ù–µ—Ç'):
            if '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ' in user_inf_db:
                message_text = '–£ –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ,\n–º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –≤ –æ—Ç–∫–ª–∏–∫–µ\n–∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ?'
                keyboard = [
                    ['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –º–æ–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏'],
                    ['–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ']
                ]
                context.user_data['–ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'] = '–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã'
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(message_text, reply_markup=reply_markup)
            else:
                context.user_data['–ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'] = '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
                text = '–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:'
                keyboard = [
                    ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(text, reply_markup=reply_markup)

    elif current_step.__eq__('–ü—Ä–æ–≤–µ—Ä–∫–∞ pdf —Ñ–∞–π–ª–∞'):
        document = update.message.document
        file_name = document.file_name
        if not file_name.lower().endswith('.pdf'):
            update.message.reply_text('–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.')
            
            context.user_data['–ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'] = '–ü—Ä–æ–≤–µ—Ä–∫–∞ pdf —Ñ–∞–π–ª–∞'
            
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        new_file = await context.bot.get_file(document.file_id)
        file_path = f"{downloads_path}/{file_name}.pdf"
        context.user_data['pdf_path'] = file_path
        await new_file.download_to_drive(file_path)

        text = '–†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ. –ñ–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö?'
        keyboard = [
                ['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'],
                ['–ù–∞–∑–∞–¥']
            ]
        context.user_data['–ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'] = '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∫–µ—Ç—ã'
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(text, reply_markup=reply_markup)

    elif current_step.__eq__('–î–æ–ø —Ä–µ–∑—é–º–µ –≤–æ–ø—Ä–æ—Å'):
        
        if current_text.__eq__('–î–∞'):
            context.user_data['–ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'] = '–î–æ–ø pdf —Ñ–∞–π–ª'
            text = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .pdf'
            keyboard = [
                ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
            ]

            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(text, reply_markup=reply_markup)

        elif current_text.__eq__('–ù–µ—Ç'):
            context.user_data['–ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'] = '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
            text = '–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:'
            keyboard = [
                ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(text, reply_markup=reply_markup)
    

    elif current_step.__eq__('–î–æ–ø pdf —Ñ–∞–π–ª'):
        document = update.message.document
        file_name = document.file_name
        if not file_name.lower().endswith('.pdf'):
            update.message.reply_text('–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.')
            
            context.user_data['–ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'] = '–î–æ–ø pdf —Ñ–∞–π–ª'
            
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
        new_file = await context.bot.get_file(document.file_id)
        file_path = f"{downloads_path}/{file_name}.pdf"
        context.user_data['pdf_path'] = file_path
        await new_file.download_to_drive(file_path)

        text = '–†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ.\n–£–∫–∞–∂–∏—Ç–µ –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:'
        context.user_data['–ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'] = '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
        keyboard = [
            ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(text, reply_markup=reply_markup)
    


    elif current_step.__eq__('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∫–µ—Ç—ã'):

        if '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ' in user_inf_db:
            message_text = '–£ –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ,\n–º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –≤ –æ—Ç–∫–ª–∏–∫–µ\n–∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ?'
            keyboard = [
                ['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –º–æ–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏'],
                ['–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ']
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(message_text, reply_markup=reply_markup)
        else:
            context.user_data['–ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'] = '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
            text = '–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:'
            keyboard = [
                ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(text, reply_markup=reply_markup)

    elif current_step.__eq__('–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã'):
        ch = current_text.__eq__('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –º–æ–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏')
        logging.info(f'–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {current_text} and {ch}')
        if current_text.__eq__('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –º–æ–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏'):
            context.user_data.pop('–ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
            
            final_text = (
                '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å! ‚ò∫Ô∏è –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π.\n\n'
                '–ï—Å–ª–∏ –≤–∞–º –Ω–µ —Ç–µ—Ä–ø–∏—Ç—Å—è —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞ –ø–æ—á—Ç—É rabota@mosenergo.ru\n\n'
                '–ò–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ –Ω–æ–º–µ—Ä—É +7 (495) 957-19-57, –¥–æ–±. 4006'
            )
            user_inf = user['user_inf']
            user_name = user_inf['–§–ò–û']
            vacancion_name = context.user_data['vacancy_name']
            note_text = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n–û—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é: {vacancion_name}'
            

            await update.message.reply_text(final_text)
            await context.bot.send_message(chat_id=group_id, text=note_text)
            
            if 'pdf_path' in context.user_data:
                pdf_path = context.user_data['pdf_path']
                await send_pdf(update, context, pdf_path=pdf_path, chat_id=group_id, user_name=user_name)
            await main_start_menu(update, context)

        elif current_text.__eq__('–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ'):


            context.user_data['–ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'] = '–î–æ–ø —Ä–µ–∑—é–º–µ –≤–æ–ø—Ä–æ—Å'
            text = '–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ä–µ–∑—é–º–µ?'
            keyboard = [
                    ['–î–∞'],
                    ['–ù–µ—Ç'],
                ]

            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await context.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)


            # context.user_data['–ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'] = '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
            # text = '–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:'
            # keyboard = [
            #     ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
            # ]
            # reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            # await update.message.reply_text(text, reply_markup=reply_markup)


    elif next_step.__eq__('–î–æ–ª–∂–Ω–æ—Å—Ç—å'):
        text = '–ñ–µ–ª–∞–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å:'
        keyboard = [
                ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
            ]

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await context.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)

    elif next_step.__eq__('–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã'):
        text = '–í–∞—à —Å—Ç–∞–∂:'
        keyboard = [
        ['–º–µ–Ω–µ–µ 1 –≥–æ–¥–∞'],
        ['1-2 –≥–æ–¥–∞'],
        ['2-3 –≥–æ–¥–∞'],
        ['3+ –ª–µ—Ç']
        
    ]

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await context.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)


    elif next_step.__eq__('–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'):
        text = '–í–∞—à —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:'
        keyboard = [
        ['–í—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'],
        ['–°—Ä–µ–¥–Ω–µ–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ'],
        ['–®–∫–æ–ª—å–Ω–æ–µ'],

    ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(text, reply_markup=reply_markup)
    
    elif next_step.__eq__('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ'):
        keyboard = [
        ['–í—Å—ë –≤–µ—Ä–Ω–æ!‚úÖ'],
        ['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'],
        ]
        user_inf = context.user_data['information_form']
        full_name = user_inf['–§–ò–û']
        phone = user_inf['–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞']
        work = user_inf['–î–æ–ª–∂–Ω–æ—Å—Ç—å']
        exp = user_inf['–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã']
        educ = user_inf['–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ']
        
        user_bio = (
            f'<b>–§–ò–û:</b>\n{full_name}\n\n'
            f'<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>\n{phone}\n\n'
            f'<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b>\n{work}\n\n'
            f'<b>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</b>\n{exp}\n\n'
            f'<b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b>\n{educ}\n\n'
            )
        logging.info(user_bio)
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(user_bio, reply_markup=reply_markup, parse_mode='HTML')
    
    elif current_step.__eq__('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ'):
        if current_text.__eq__('–í—Å—ë –≤–µ—Ä–Ω–æ!‚úÖ'):
            context.user_data.pop('–ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö')
            
            user_inf = context.user_data['information_form']
            full_name = user_inf['–§–ò–û']
            phone = user_inf['–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞']
            work = user_inf['–î–æ–ª–∂–Ω–æ—Å—Ç—å']
            exp = user_inf['–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã']
            educ = user_inf['–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ']
            final_text = (
                '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å! ‚ò∫Ô∏è –ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π.\n\n'
                '–ï—Å–ª–∏ –≤–∞–º –Ω–µ —Ç–µ—Ä–ø–∏—Ç—Å—è —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞ –ø–æ—á—Ç—É rabota@mosenergo.ru\n\n'
                '–ò–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –ø–æ –Ω–æ–º–µ—Ä—É +7 (495) 957-19-57, –¥–æ–±. 4006'
            )
            await context.bot.send_message(chat_id=user_id, text=final_text, parse_mode='Markdown')

            user_inf = user['user_inf']
            user_name = user_inf['–§–ò–û']
            vacancion_name = context.user_data['vacancy_name']
            note_text = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n–û—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é: {vacancion_name}'

            await context.bot.send_message(chat_id=group_id, text=note_text)
            if 'pdf_path' in context.user_data:
                pdf_path = context.user_data['pdf_path']
                await send_pdf(update, context, pdf_path=pdf_path, chat_id=group_id, user_name=user_name)
            await main_start_menu(update, context)

        else:
            context.user_data['–ó–∞–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'] = '–§–ò–û'
            keyboard = [
                ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text('–¢–æ–≥–¥–∞ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞.\n–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –§–ò–û:', reply_markup=reply_markup)


async def user_full_information_process(update: Update, context: ContextTypes.DEFAULT_TYPE):
    current_text = update.message.text
    user_id = update.effective_user.id
    step = {
        '–ó–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è': ('–°—Ç–∞—Ä—Ç', '–ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –±–æ—Ç–∞,\n–∞ –æ–Ω –±–µ—Ä–µ–∂–Ω–æ —Å–æ–±–µ—Ä–µ—Ç –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∞–Ω–∫–µ—Ç—É üì†'),
        # '–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞': ('–°—Ç–∞—Ä—Ç', None),
        '–°—Ç–∞—Ä—Ç': ('–§–ò–û','–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤–∞—à–∏ –§–ò–û:'),
        '–§–ò–û': ('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', '–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:'),
        '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞': ('–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–ñ–µ–ª–∞–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å:'),
        '–î–æ–ª–∂–Ω–æ—Å—Ç—å': ('–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã', '–í–∞—à —Å—Ç–∞–∂:'),
        '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã': ('–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–í–∞—à —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:'),
        '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': ('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', None),
        '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ': ('done', '–£—Ä–∞, –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É–∂–µ —É –Ω–∞—Å! –°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ –≤—Ä–µ–º—è, –º—ã –í–∞—Å –Ω–µ –ø–æ–¥–≤–µ–¥–µ–º!\n–ï—Å–ª–∏ –í–∞–º –Ω–µ —Ö–æ—á–µ—Ç—Å—è –∂–¥–∞—Ç—å, –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞–º –Ω–∞–ø—Ä—è–º—É—é: +7 495 957-19-57'),
        'done': (None, None)
    }

    save_steps = [
        '–§–ò–û', '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', '–î–æ–ª–∂–Ω–æ—Å—Ç—å', '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã', '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'
        ]
    current_step = context.user_data['–ó–∞–ø—Ä–æ—Å full –¥–∞–Ω–Ω—ã—Ö']
    
    logging.info(f'current_text = {current_text}')
    if current_text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' or current_text == '–ù–∞–∑–∞–¥':
        context.user_data.pop('–ó–∞–ø—Ä–æ—Å full –¥–∞–Ω–Ω—ã—Ö')
        await main_start_menu(update, context)
        return

    if current_step in save_steps:
        context.user_data['information_form'][current_step] = current_text
        await update_user_in_db(user_id, user_inf={current_step:current_text})
    
    # –ü–û–î–£–ú–ê–¢–¨ –û –¢–û–ú –ß–¢–û–ë–´ –ü–ï–†–ï–ù–ï–°–¢–ò –î–í–ï –°–¢–†–û–ö–ò, –ö–û–¢–û–†–´–ï –ù–ò–ñ–ï –ò –ò–ó–ú–ï–ù–ò–¢–¨ –ü–†–û–í–ï–†–ö–£
    # –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–µ –°–õ–ï–î–£–Æ–©–ï–ì–û —à–∞–≥–∞, –∞ –¢–ï–ö–£–©–ï–ì–û
    next_step, message_text = step[current_step]
    context.user_data['–ó–∞–ø—Ä–æ—Å full –¥–∞–Ω–Ω—ã—Ö'] = next_step
    
    
    if current_step.__eq__('–ó–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'):
        text = '–ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –±–æ—Ç–∞,\n–∞ –æ–Ω –±–µ—Ä–µ–∂–Ω–æ —Å–æ–±–µ—Ä–µ—Ç –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∞–Ω–∫–µ—Ç—É üì†'
        logging.info(f'–¢–ï–ö–£–©–ò–ô –®–ê–ì {current_step} –∞ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è {current_text}')
        keyboard_cancel = [
            ['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'],
            ['–ù–∞–∑–∞–¥']
        ]

        reply_markup = ReplyKeyboardMarkup(keyboard_cancel, resize_keyboard=True)
        await context.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)

    
    elif next_step.__eq__('–§–ò–û'):
        logging.info(f'–¢–ï–ö–£–©–ò–ô –®–ê–ì {current_step} –∞ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è {current_text}')
        text = '–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤–∞—à–∏ –§–ò–û:'
        if current_text.__eq__('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'):
            keyboard = [
            ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
            ]

            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(text, reply_markup=reply_markup)
    

    elif next_step.__eq__('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'):
        logging.info(f'–¢–ï–ö–£–©–ò–ô –®–ê–ì {current_step} –∞ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è {current_text}')
        text = '–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:'
        keyboard = [
        ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
        ]

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(text, reply_markup=reply_markup)
    

    elif next_step.__eq__('–î–æ–ª–∂–Ω–æ—Å—Ç—å'):
        logging.info(f'–¢–ï–ö–£–©–ò–ô –®–ê–ì {current_step} –∞ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è {current_text}')
        text = '–ñ–µ–ª–∞–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å:'
        keyboard = [
            ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
        ]

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(text, reply_markup=reply_markup)
    

    elif next_step.__eq__('–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã'):
        logging.info(f'–¢–ï–ö–£–©–ò–ô –®–ê–ì {current_step} –∞ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è {current_text}')
        text = '–í–∞—à —Å—Ç–∞–∂:'
        keyboard = [
        ['–º–µ–Ω–µ–µ 1 –≥–æ–¥–∞'],
        ['1-2 –≥–æ–¥–∞'],
        ['2-3 –≥–æ–¥–∞'],
        ['3+ –ª–µ—Ç']
        
        ]

        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(text, reply_markup=reply_markup)
    
    elif next_step.__eq__('–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'):
        logging.info(f'–¢–ï–ö–£–©–ò–ô –®–ê–ì {current_step} –∞ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è {current_text}')
        text = '–í–∞—à —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:'
        keyboard = [
        ['–í—ã—Å—à–µ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ'],
        ['–°—Ä–µ–¥–Ω–µ–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ'],
        ['–®–∫–æ–ª—å–Ω–æ–µ'],

    ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(text, reply_markup=reply_markup)


    elif next_step.__eq__('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ'):
        logging.info(f'–¢–ï–ö–£–©–ò–ô –®–ê–ì {current_step} –∞ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è {current_text}')
        keyboard = [
        ['–í—Å—ë –≤–µ—Ä–Ω–æ!‚úÖ'],
        ['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'],
        ]

        user_inf = context.user_data['information_form']
        full_name = user_inf['–§–ò–û']
        phone = user_inf['–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞']
        work = user_inf['–î–æ–ª–∂–Ω–æ—Å—Ç—å']
        exp = user_inf['–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã']
        educ = user_inf['–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ']
        
        user_bio = (
            f'<b>–§–ò–û:</b>\n{full_name}\n\n'
            f'<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>\n{phone}\n\n'
            f'<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b>\n{work}\n\n'
            f'<b>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</b>\n{exp}\n\n'
            f'<b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b>\n{educ}\n\n'
            )
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(user_bio, reply_markup=reply_markup, parse_mode='HTML')

    elif current_step.__eq__('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ'):
        logging.info(f'–¢–ï–ö–£–©–ò–ô –®–ê–ì {current_step} –∞ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è {current_text}')
        if current_text.__eq__('–í—Å—ë –≤–µ—Ä–Ω–æ!‚úÖ'):
            context.user_data.pop('–ó–∞–ø—Ä–æ—Å full –¥–∞–Ω–Ω—ã—Ö')
            
            user_inf = context.user_data['information_form']
            full_name = user_inf['–§–ò–û']
            phone = user_inf['–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞']
            work = user_inf['–î–æ–ª–∂–Ω–æ—Å—Ç—å']
            exp = user_inf['–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã']
            educ = user_inf['–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ']
            
            user_bio_notice = (
            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name}\n'
            '–ó–∞–ø–æ–ª–Ω–∏–ª –∞–Ω–∫–µ—Ç—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n'
            f'<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>\n{phone}\n'
            f'<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b>\n{work}\n'
            f'<b>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</b>\n{exp}\n'
            f'<b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b>\n{educ}\n'
            )
            
            await context.bot.send_message(chat_id=user_id, text=message_text, parse_mode='Markdown')
            await context.bot.send_message(chat_id=group_id, text=user_bio_notice, parse_mode='HTML')
            await main_start_menu(update, context)

        else:
            context.user_data['–ó–∞–ø—Ä–æ—Å full –¥–∞–Ω–Ω—ã—Ö'] = '–§–ò–û'
            keyboard = [
                ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'],
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text('–¢–æ–≥–¥–∞ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞.\n–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –§–ò–û:', reply_markup=reply_markup)

    logging.info(f'–ó–ê–í–ï–†–®–ê–ï–ú –†–ê–ë–û–¢–£ –§–£–ù–ö–¶–ò–ò —Å —à–∞–≥–æ–º {current_step} –∞ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è {current_text}')
    

async def send_messages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.info('send process')
    # –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    message_creator = {
        'Creating' : message_text_getting,
        'Edited' : message_text_confirmation,
        'Completed' : message_text_sending
    }
    if 'message_state' not in context.user_data:
        context.user_data['message_state'] = 'Creating'
    current_message_state = context.user_data.get('message_state')

    current_step = message_creator[current_message_state]

    await current_step(update, context)


async def message_text_getting(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    logging.info('edit process')
    context.user_data['message_text'] = None

    await update.message.reply_text('–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å:', reply_markup=ReplyKeyboardRemove())

    context.user_data['message_state'] = 'Edited'

async def message_text_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
    logging.info('confirm process')
    user_id = update.effective_user.id
    message_text, image_path = await download_message_with_image(update, context)
    context.user_data['message_inf'] = (message_text, image_path)
    
    keyboard = [
        ['–î–∞'],
        ['–ù–µ—Ç']
        
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text('–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ?', reply_markup=reply_markup)
    await forward_message_with_image(update, context, message_text, image_path, user_id)
    context.user_data['message_state'] = 'Completed'


async def message_text_sending(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:

    keyboard = [
        ['–†–∞—Å—Å—ã–ª–∫–∞'],
        ['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ]

    message_text = update.message.text
    if message_text == '–î–∞':
        current_message_text, image_path = context.user_data.get('message_inf')
        users = await get_all_users()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_id = [user['telegram_id'] for user in users]

        for user_id in users_id:
            try:
                await forward_message_with_image(update, context, current_message_text, image_path, user_id)
            except Exception as error:
                logging.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {error}")

        context.user_data.pop('message_state')
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.', reply_markup=reply_markup)

    elif message_text == '–ù–µ—Ç':
        context.user_data['message_state'] = 'Creating'
        await message_text_getting(update, context)
    

async def download_message_with_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    # message_text = context.user_data.get('current_text')
    message_text = update.message.text
    file_path = None

    if update.message.photo:
        message_text = update.message.caption
        context.user_data['current_text'] = message_text
        photo = update.message.photo[-1]  # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        file = await photo.get_file()
        file_path = f"{downloads_path}/{photo.file_id}.jpg"
        context.user_data['photo_path'] = file_path  # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await file.download_to_drive(file_path)

        return message_text, file_path

    else:
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        return message_text, file_path


async def forward_message_with_image(update: Update, context: ContextTypes.DEFAULT_TYPE, message_text, image_path, user_id) -> None:
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–ª–æ–∂–µ–Ω–∏–µ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
    if image_path:

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ —Ç–µ–∫—Å—Ç–æ–º
        with open(image_path, 'rb') as img_file:
            await context.bot.send_photo(chat_id=user_id, photo=img_file, caption=message_text, parse_mode='Markdown')
    else:
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        await context.bot.send_message(chat_id=user_id, text=message_text, parse_mode='Markdown')


async def get_vacancy_count():
    employer_id = '27708'
    url = f'https://api.hh.ru/vacancies?employer_id={employer_id}'

    response = requests.get(url)

    if response.status_code == 200:
        data = response.json()
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π
        total_vacancies = data['found']
        return total_vacancies
    else:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {response.status_code}")


async def check_for_empty_list(result):
    return result == []


async def user_form_create(update, context, message_text=None):

    keyboard_cancel = [
        ['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'],
        ['–ù–∞–∑–∞–¥']
    ]
    
    if message_text == None:
        message_text = (
            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ—Ç.\n'
            '–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–µ–±–æ–ª—å—à—É—é —Ñ–æ—Ä–º—É.\n'
            '–ò –º—ã —Å–æ–æ–±—â–∏–º –í–∞–º –≤ —á–∏—Å–ª–µ –ø–µ—Ä–≤—ã—Ö, –∫–æ–≥–¥–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –ø–æ—è–≤–∏—Ç—Å—è!'
        )

    reply_markup = ReplyKeyboardMarkup(keyboard_cancel, resize_keyboard=True)
    await update.message.reply_text(message_text, reply_markup=reply_markup)

    context.user_data['–ó–∞–ø—Ä–æ—Å full –¥–∞–Ω–Ω—ã—Ö'] = '–ó–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
    context.user_data['information_form'] = {}
    await user_full_information_process(update, context)


async def inline_buttons_packed(update, context, result):
    for vacancy_full in result:
        vacancy = vacancy_full.vacancy_inf
        vacancy_id = vacancy_full.vacancy_id
        vacancy_text = await message_creater(vacancy)
        
        await send_inline_buttons(update, context, message_text=vacancy_text, vacancy_id=vacancy_id)


async def get_vacancies_by_keys_list(update, context, keywords):
    try:
        result = await get_vacancies_by_keys_list_module(keywords)
    
    except Exception as error:
        sleep(5)
        result = await get_vacancies_by_keys_list_module(keywords)
    
    else:
        empty_list = await check_for_empty_list(result)
        if empty_list:
            text = (
            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ—Ç.\n'
            '–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.\n'
        )
            await update.message.reply_text(text)
            return

        await inline_buttons_packed(update, context, result)


async def get_no_exp_vacancies(update, context):
    try:
        result = await get_no_exp_vacancies_module()

    except Exception as error:
        sleep(5)
        result = await get_no_exp_vacancies_module()

    else:
        empty_list = await check_for_empty_list(result)
        if empty_list:
            text = (
            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ—Ç.\n'
            '–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.\n'
        )
            await update.message.reply_text(text)
            return

        await inline_buttons_packed(update, context, result)


async def get_vacancies_by_key_word(update, context, key_word):
    try:
        result = await get_vacancies_by_key_word_module(key_word)

    except Exception as error:
        sleep(5)
        result = await get_vacancies_by_key_word_module(key_word)

    else:
        empty_list = await check_for_empty_list(result)
        if empty_list:
            text = (
            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ—Ç.\n'
            '–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.\n'
        )
            await update.message.reply_text(text)
            return

        await inline_buttons_packed(update, context, result)
            

async def message_creater(vacancy):
    for key, value in vacancy.items():

        if type(value) == list:
            value = ', '.join(value)
            vacancy[key] = value

        if str(value) == '' or str(value) == 'None':
            vacancy[key] = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.\n'

    if 'None' in vacancy['–û–ø–ª–∞—Ç–∞ –û–¢']:
        vacancy['–û–ø–ª–∞—Ç–∞ –û–¢'] = ''
    if 'None' in vacancy['–û–ø–ª–∞—Ç–∞ –î–û']:
        vacancy['–û–ø–ª–∞—Ç–∞ –î–û'] = ''


    vacancy_name = vacancy['–í–∞–∫–∞–Ω—Å–∏—è']

    # valute = vacancy['–í–∞–ª—é—Ç–∞']
    min_salary = vacancy['–û–ø–ª–∞—Ç–∞ –û–¢']
    max_salary = vacancy['–û–ø–ª–∞—Ç–∞ –î–û']
    min_max_salary_str = f'{min_salary}{max_salary}'
    if min_max_salary_str == '':
        min_max_salary_str = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n'
    
    req_text = vacancy['–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è']
    if req_text != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.\n':
        logging.info(f'–ü–†–û–í–ï–†–ö–ê:\nreq_text = !!{req_text}!!\ntype ={type(req_text)}\n')
        requirement = vacancy['–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è'].split('. ')
        req_text = '\n'
        for req in requirement:
            
            if len(req) > 3:
                if req[0] == '-':
                    req = req[1::]
                req_text += f'- {req}.\n'
    
    resp_text = vacancy['–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏']
    if resp_text != '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.\n':
        responsibilities = vacancy['–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏'].split('. ')
        resp_text = '\n'
        for resp in responsibilities:
            if resp != '': 
                resp_text += f'- {resp}.\n'

    schedule = vacancy['–†–∞–±–æ—á–∏–π –≥—Ä–∞—Ñ–∏–∫']

    experience = vacancy['–ù–∞–ª–∏—á–∏–µ –æ–ø—ã—Ç–∞']
    if '–ù–µ—Ç –æ–ø—ã—Ç–∞' in experience:
        experience = '—Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –±–µ–∑ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã'
    
    employment = vacancy['–ó–∞–Ω—è—Ç–æ—Å—Ç—å']

    vacancy_url = vacancy['–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é']
    message = f'[–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é]({vacancy_url})'
    
    vacancy_text = (
    f'<b>–í–∞–∫–∞–Ω—Å–∏—è: {vacancy_name}</b>\n\n'

    f'üí∞ <u><b>–û–ø–ª–∞—Ç–∞</b></u>:\n'
    f'{min_max_salary_str}\n'

    f'üìã <u><b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è</b></u>: {req_text}\n'

    f'‚öôÔ∏è <u><b>–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏</b></u>: {resp_text}\n'

    f'üïí <u><b>–†–∞–±–æ—á–∏–π –≥—Ä–∞—Ñ–∏–∫</b></u>: {schedule}.\n\n'

    f'üë• <u><b>–ù–∞–ª–∏—á–∏–µ –æ–ø—ã—Ç–∞</b></u>: {experience}.\n\n'

    f'üìÖ <u><b>–ó–∞–Ω—è—Ç–æ—Å—Ç—å</b></u>: {employment}.\n\n'

    # f'üîó <a href="{vacancy_url}">–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é</a>\n\n'

    '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ –∏ —Å—Ç–∞–Ω—å—Ç–µ —á–∞—Å—Ç—å—é\n–¥–∏–Ω–∞–º–∏—á–Ω–æ–π —Å—Ñ–µ—Ä—ã —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏! üí°‚ú®'
    )

    return vacancy_text


async def get_all_company_vacancies(update, context):
    try:
        result = await get_all_vacancies_module()

    except Exception as error:
        sleep(5)
        result = await get_all_vacancies_module()

    else:
        empty_list = await check_for_empty_list(result)
        if empty_list:
            text = (
            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ—Ç.\n'
            '–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.\n'
        )
            await update.message.reply_text(text)
            return

        await inline_buttons_packed(update, context, result)


async def update_vacancies_db(page=0, per_page=100):
    
    logging.info(f'–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ = {ACCESS_TOKEN}')
    
    vacancies_url = "https://api.hh.ru/vacancies"
    headers = {
        "Authorization": f"Bearer {ACCESS_TOKEN}",
        "Content-Type": "application/json"
    }
    params = {
        "area": 1,  # ID –≥–æ—Ä–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–æ—Å–∫–≤–∞ - 1
        'employer_id': [27708],
        "page": page,
        "per_page": per_page
    }
    response = requests.get(vacancies_url, headers=headers, params=params)
    if response.status_code != 200:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π: {response.status_code} - {response.text}")
    else:
        result = response.json()
        
        formatted_json = json.dumps(result['items'], ensure_ascii=False, indent=4)
        logging.info(f'formatted_json = {formatted_json}\n\n')
        tight_inf = await inf_taker(result['items'])
        await filling_vacancies_to_db(tight_inf)


async def send_inline_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE, message_text, vacancy_id) -> None:
    logging.info('–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ö–ù–û–ü–û–ö')
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    keyboard = [
        [
            InlineKeyboardButton("–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f'tq;{vacancy_id}')
        ],

        [
            InlineKeyboardButton("–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è —á–µ—Ä–µ–∑ hhru", callback_data=f'{vacancy_id}')
        ],

        [
            InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ üìû", callback_data='get_spec')
        ],
    ]

    # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –∫–Ω–æ–ø–æ–∫
    reply_markup = InlineKeyboardMarkup(keyboard)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
    await update.message.reply_text(message_text, reply_markup=reply_markup, parse_mode='HTML')


async def extra_inline_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
    keyboard = [
        [
            InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f'main_menu')
        ],

    ]
    # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –∫–Ω–æ–ø–æ–∫
    reply_markup = InlineKeyboardMarkup(keyboard)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
    text = '–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è.'
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')


async def inf_taker(full_information):
    tight_information = []
    for vac in full_information:
        new_vac = {}
        new_vac['id –í–∞–∫–∞–Ω—Å–∏–∏'] = vac['id']
        new_vac['–ù–∞–∑–≤–∞–Ω–∏–µ –ö–æ–º–ø–∞–Ω–∏–∏'] = vac['employer']['name']
        new_vac['–í–∞–∫–∞–Ω—Å–∏—è'] = vac['name']
        
        # new_vac['–í–∞–ª—é—Ç–∞'] = vac['salary']['currency']
        try:
            valute = vac['salary']['currency']
            if valute.__eq__('RUR'):
                valute = '—Ä—É–±'
            value_m = vac['salary']['from']
            new_vac['–û–ø–ª–∞—Ç–∞ –û–¢'] = f'–û—Ç {value_m} {valute}\n'
            
            value_max = vac['salary']['to'] 
            new_vac['–û–ø–ª–∞—Ç–∞ –î–û'] = f'–î–æ {value_max} {valute}\n'
        except Exception:
            new_vac['–û–ø–ª–∞—Ç–∞ –û–¢'] = f'–û—Ç: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n'
            new_vac['–û–ø–ª–∞—Ç–∞ –î–û'] = f'–î–æ: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n'
        
        # new_vac['–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'] = vac['employer']['logo_urls']['original']
        work_req = vac['snippet']['requirement']
        if work_req:
            new_vac['–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è'] = re.sub(r'<[^>]+>', '', work_req)
        else:
            new_vac['–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è'] = None
        work_resp = vac['snippet']['responsibility']
        if work_resp:
            new_vac['–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏'] = re.sub(r'<[^>]+>', '', work_resp)
        else:
            new_vac['–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏'] = None

        new_vac['–†–∞–±–æ—á–∏–π –≥—Ä–∞—Ñ–∏–∫'] = vac['schedule']['name']

        new_vac['–ù–∞–ª–∏—á–∏–µ –æ–ø—ã—Ç–∞'] = vac['experience']['name'] 

        new_vac['–ó–∞–Ω—è—Ç–æ—Å—Ç—å'] = vac['employment']['name']

        
        # new_vac['–≥–æ—Ä–æ–¥'] = vac['address']['city']
        try:
            m_s = vac['address']['metro_stations']
            new_vac['–°—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ'] = []
            for metro_stations in m_s:
                # new_vac['—Å—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ'].append(metro_stations['station_name'], metro_stations['line_name'])
                new_vac['–°—Ç–∞–Ω—Ü–∏–∏ –º–µ—Ç—Ä–æ'].append(metro_stations['station_name'])

        except Exception:
            pass
        
        
        new_vac['–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é'] = vac['alternate_url']
        new_vac['–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è'] = vac['employer']['alternate_url']
        tight_information.append(new_vac)
        
    return tight_information


async def image_download_by_url(image_url, context):

    folder = downloads_path
    image_name = os.path.basename(image_url)
    file_path = os.path.join(f'{folder}/', image_name)


    response = requests.get(image_url)
    response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
    print(file_path)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –¥–∏—Å–∫
    with open(file_path, 'wb') as file:
        file.write(response.content)

    # context.user_data['company_image_path'] = file_path
    return file_path


async def send_pdf(update, context, pdf_path, chat_id, user_name):
    # –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É PDF-—Ñ–∞–π–ª—É
    pdf_file_path = pdf_path
    pdf_name = f'–†–µ–∑—é–º–µ {user_name}.pdf'
    with open(pdf_file_path, 'rb') as pdf_file:
        await context.bot.send_document(chat_id=chat_id, document=pdf_file, filename=pdf_name)
